
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Submissao
 * 
 */
export type Submissao = $Result.DefaultSelection<Prisma.$SubmissaoPayload>
/**
 * Model Contatos
 * 
 */
export type Contatos = $Result.DefaultSelection<Prisma.$ContatosPayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Desafio
 * 
 */
export type Desafio = $Result.DefaultSelection<Prisma.$DesafioPayload>
/**
 * Model Cases
 * 
 */
export type Cases = $Result.DefaultSelection<Prisma.$CasesPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Submissaos
 * const submissaos = await prisma.submissao.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Submissaos
   * const submissaos = await prisma.submissao.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.submissao`: Exposes CRUD operations for the **Submissao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissaos
    * const submissaos = await prisma.submissao.findMany()
    * ```
    */
  get submissao(): Prisma.SubmissaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contatos`: Exposes CRUD operations for the **Contatos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contatos
    * const contatos = await prisma.contatos.findMany()
    * ```
    */
  get contatos(): Prisma.ContatosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.desafio`: Exposes CRUD operations for the **Desafio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Desafios
    * const desafios = await prisma.desafio.findMany()
    * ```
    */
  get desafio(): Prisma.DesafioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cases`: Exposes CRUD operations for the **Cases** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.cases.findMany()
    * ```
    */
  get cases(): Prisma.CasesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Submissao: 'Submissao',
    Contatos: 'Contatos',
    Usuario: 'Usuario',
    Desafio: 'Desafio',
    Cases: 'Cases'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "submissao" | "contatos" | "usuario" | "desafio" | "cases"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Submissao: {
        payload: Prisma.$SubmissaoPayload<ExtArgs>
        fields: Prisma.SubmissaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>
          }
          findFirst: {
            args: Prisma.SubmissaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>
          }
          findMany: {
            args: Prisma.SubmissaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>[]
          }
          create: {
            args: Prisma.SubmissaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>
          }
          createMany: {
            args: Prisma.SubmissaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>[]
          }
          delete: {
            args: Prisma.SubmissaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>
          }
          update: {
            args: Prisma.SubmissaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>
          }
          deleteMany: {
            args: Prisma.SubmissaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>[]
          }
          upsert: {
            args: Prisma.SubmissaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissaoPayload>
          }
          aggregate: {
            args: Prisma.SubmissaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmissao>
          }
          groupBy: {
            args: Prisma.SubmissaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissaoCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissaoCountAggregateOutputType> | number
          }
        }
      }
      Contatos: {
        payload: Prisma.$ContatosPayload<ExtArgs>
        fields: Prisma.ContatosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContatosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContatosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>
          }
          findFirst: {
            args: Prisma.ContatosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContatosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>
          }
          findMany: {
            args: Prisma.ContatosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>[]
          }
          create: {
            args: Prisma.ContatosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>
          }
          createMany: {
            args: Prisma.ContatosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContatosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>[]
          }
          delete: {
            args: Prisma.ContatosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>
          }
          update: {
            args: Prisma.ContatosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>
          }
          deleteMany: {
            args: Prisma.ContatosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContatosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContatosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>[]
          }
          upsert: {
            args: Prisma.ContatosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatosPayload>
          }
          aggregate: {
            args: Prisma.ContatosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContatos>
          }
          groupBy: {
            args: Prisma.ContatosGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContatosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContatosCountArgs<ExtArgs>
            result: $Utils.Optional<ContatosCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Desafio: {
        payload: Prisma.$DesafioPayload<ExtArgs>
        fields: Prisma.DesafioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DesafioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DesafioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>
          }
          findFirst: {
            args: Prisma.DesafioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DesafioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>
          }
          findMany: {
            args: Prisma.DesafioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>[]
          }
          create: {
            args: Prisma.DesafioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>
          }
          createMany: {
            args: Prisma.DesafioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DesafioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>[]
          }
          delete: {
            args: Prisma.DesafioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>
          }
          update: {
            args: Prisma.DesafioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>
          }
          deleteMany: {
            args: Prisma.DesafioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DesafioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DesafioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>[]
          }
          upsert: {
            args: Prisma.DesafioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesafioPayload>
          }
          aggregate: {
            args: Prisma.DesafioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDesafio>
          }
          groupBy: {
            args: Prisma.DesafioGroupByArgs<ExtArgs>
            result: $Utils.Optional<DesafioGroupByOutputType>[]
          }
          count: {
            args: Prisma.DesafioCountArgs<ExtArgs>
            result: $Utils.Optional<DesafioCountAggregateOutputType> | number
          }
        }
      }
      Cases: {
        payload: Prisma.$CasesPayload<ExtArgs>
        fields: Prisma.CasesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CasesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CasesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>
          }
          findFirst: {
            args: Prisma.CasesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CasesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>
          }
          findMany: {
            args: Prisma.CasesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>[]
          }
          create: {
            args: Prisma.CasesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>
          }
          createMany: {
            args: Prisma.CasesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CasesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>[]
          }
          delete: {
            args: Prisma.CasesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>
          }
          update: {
            args: Prisma.CasesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>
          }
          deleteMany: {
            args: Prisma.CasesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CasesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CasesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>[]
          }
          upsert: {
            args: Prisma.CasesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasesPayload>
          }
          aggregate: {
            args: Prisma.CasesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCases>
          }
          groupBy: {
            args: Prisma.CasesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CasesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CasesCountArgs<ExtArgs>
            result: $Utils.Optional<CasesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    submissao?: SubmissaoOmit
    contatos?: ContatosOmit
    usuario?: UsuarioOmit
    desafio?: DesafioOmit
    cases?: CasesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DesafioCountOutputType
   */

  export type DesafioCountOutputType = {
    submissao: number
  }

  export type DesafioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissao?: boolean | DesafioCountOutputTypeCountSubmissaoArgs
  }

  // Custom InputTypes
  /**
   * DesafioCountOutputType without action
   */
  export type DesafioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesafioCountOutputType
     */
    select?: DesafioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DesafioCountOutputType without action
   */
  export type DesafioCountOutputTypeCountSubmissaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissaoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Submissao
   */

  export type AggregateSubmissao = {
    _count: SubmissaoCountAggregateOutputType | null
    _avg: SubmissaoAvgAggregateOutputType | null
    _sum: SubmissaoSumAggregateOutputType | null
    _min: SubmissaoMinAggregateOutputType | null
    _max: SubmissaoMaxAggregateOutputType | null
  }

  export type SubmissaoAvgAggregateOutputType = {
    id: number | null
    desafioId: number | null
  }

  export type SubmissaoSumAggregateOutputType = {
    id: number | null
    desafioId: number | null
  }

  export type SubmissaoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    descricao: string | null
    nomeProjeto: string | null
    documento: string | null
    status: string | null
    createdAt: Date | null
    desafioId: number | null
  }

  export type SubmissaoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    descricao: string | null
    nomeProjeto: string | null
    documento: string | null
    status: string | null
    createdAt: Date | null
    desafioId: number | null
  }

  export type SubmissaoCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    descricao: number
    nomeProjeto: number
    documento: number
    status: number
    createdAt: number
    desafioId: number
    _all: number
  }


  export type SubmissaoAvgAggregateInputType = {
    id?: true
    desafioId?: true
  }

  export type SubmissaoSumAggregateInputType = {
    id?: true
    desafioId?: true
  }

  export type SubmissaoMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    descricao?: true
    nomeProjeto?: true
    documento?: true
    status?: true
    createdAt?: true
    desafioId?: true
  }

  export type SubmissaoMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    descricao?: true
    nomeProjeto?: true
    documento?: true
    status?: true
    createdAt?: true
    desafioId?: true
  }

  export type SubmissaoCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    descricao?: true
    nomeProjeto?: true
    documento?: true
    status?: true
    createdAt?: true
    desafioId?: true
    _all?: true
  }

  export type SubmissaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissao to aggregate.
     */
    where?: SubmissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissaos to fetch.
     */
    orderBy?: SubmissaoOrderByWithRelationInput | SubmissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissaos
    **/
    _count?: true | SubmissaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissaoMaxAggregateInputType
  }

  export type GetSubmissaoAggregateType<T extends SubmissaoAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmissao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmissao[P]>
      : GetScalarType<T[P], AggregateSubmissao[P]>
  }




  export type SubmissaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissaoWhereInput
    orderBy?: SubmissaoOrderByWithAggregationInput | SubmissaoOrderByWithAggregationInput[]
    by: SubmissaoScalarFieldEnum[] | SubmissaoScalarFieldEnum
    having?: SubmissaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissaoCountAggregateInputType | true
    _avg?: SubmissaoAvgAggregateInputType
    _sum?: SubmissaoSumAggregateInputType
    _min?: SubmissaoMinAggregateInputType
    _max?: SubmissaoMaxAggregateInputType
  }

  export type SubmissaoGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento: string | null
    status: string | null
    createdAt: Date | null
    desafioId: number
    _count: SubmissaoCountAggregateOutputType | null
    _avg: SubmissaoAvgAggregateOutputType | null
    _sum: SubmissaoSumAggregateOutputType | null
    _min: SubmissaoMinAggregateOutputType | null
    _max: SubmissaoMaxAggregateOutputType | null
  }

  type GetSubmissaoGroupByPayload<T extends SubmissaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissaoGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissaoGroupByOutputType[P]>
        }
      >
    >


  export type SubmissaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    nomeProjeto?: boolean
    documento?: boolean
    status?: boolean
    createdAt?: boolean
    desafioId?: boolean
    desafioOrigem?: boolean | DesafioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissao"]>

  export type SubmissaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    nomeProjeto?: boolean
    documento?: boolean
    status?: boolean
    createdAt?: boolean
    desafioId?: boolean
    desafioOrigem?: boolean | DesafioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissao"]>

  export type SubmissaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    nomeProjeto?: boolean
    documento?: boolean
    status?: boolean
    createdAt?: boolean
    desafioId?: boolean
    desafioOrigem?: boolean | DesafioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissao"]>

  export type SubmissaoSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    nomeProjeto?: boolean
    documento?: boolean
    status?: boolean
    createdAt?: boolean
    desafioId?: boolean
  }

  export type SubmissaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "telefone" | "descricao" | "nomeProjeto" | "documento" | "status" | "createdAt" | "desafioId", ExtArgs["result"]["submissao"]>
  export type SubmissaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    desafioOrigem?: boolean | DesafioDefaultArgs<ExtArgs>
  }
  export type SubmissaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    desafioOrigem?: boolean | DesafioDefaultArgs<ExtArgs>
  }
  export type SubmissaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    desafioOrigem?: boolean | DesafioDefaultArgs<ExtArgs>
  }

  export type $SubmissaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submissao"
    objects: {
      desafioOrigem: Prisma.$DesafioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string
      descricao: string
      nomeProjeto: string
      documento: string | null
      status: string | null
      createdAt: Date | null
      desafioId: number
    }, ExtArgs["result"]["submissao"]>
    composites: {}
  }

  type SubmissaoGetPayload<S extends boolean | null | undefined | SubmissaoDefaultArgs> = $Result.GetResult<Prisma.$SubmissaoPayload, S>

  type SubmissaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissaoCountAggregateInputType | true
    }

  export interface SubmissaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submissao'], meta: { name: 'Submissao' } }
    /**
     * Find zero or one Submissao that matches the filter.
     * @param {SubmissaoFindUniqueArgs} args - Arguments to find a Submissao
     * @example
     * // Get one Submissao
     * const submissao = await prisma.submissao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissaoFindUniqueArgs>(args: SelectSubset<T, SubmissaoFindUniqueArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submissao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissaoFindUniqueOrThrowArgs} args - Arguments to find a Submissao
     * @example
     * // Get one Submissao
     * const submissao = await prisma.submissao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissaoFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submissao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoFindFirstArgs} args - Arguments to find a Submissao
     * @example
     * // Get one Submissao
     * const submissao = await prisma.submissao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissaoFindFirstArgs>(args?: SelectSubset<T, SubmissaoFindFirstArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submissao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoFindFirstOrThrowArgs} args - Arguments to find a Submissao
     * @example
     * // Get one Submissao
     * const submissao = await prisma.submissao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissaoFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissaos
     * const submissaos = await prisma.submissao.findMany()
     * 
     * // Get first 10 Submissaos
     * const submissaos = await prisma.submissao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissaoWithIdOnly = await prisma.submissao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissaoFindManyArgs>(args?: SelectSubset<T, SubmissaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submissao.
     * @param {SubmissaoCreateArgs} args - Arguments to create a Submissao.
     * @example
     * // Create one Submissao
     * const Submissao = await prisma.submissao.create({
     *   data: {
     *     // ... data to create a Submissao
     *   }
     * })
     * 
     */
    create<T extends SubmissaoCreateArgs>(args: SelectSubset<T, SubmissaoCreateArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissaos.
     * @param {SubmissaoCreateManyArgs} args - Arguments to create many Submissaos.
     * @example
     * // Create many Submissaos
     * const submissao = await prisma.submissao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissaoCreateManyArgs>(args?: SelectSubset<T, SubmissaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissaos and returns the data saved in the database.
     * @param {SubmissaoCreateManyAndReturnArgs} args - Arguments to create many Submissaos.
     * @example
     * // Create many Submissaos
     * const submissao = await prisma.submissao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissaos and only return the `id`
     * const submissaoWithIdOnly = await prisma.submissao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissaoCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submissao.
     * @param {SubmissaoDeleteArgs} args - Arguments to delete one Submissao.
     * @example
     * // Delete one Submissao
     * const Submissao = await prisma.submissao.delete({
     *   where: {
     *     // ... filter to delete one Submissao
     *   }
     * })
     * 
     */
    delete<T extends SubmissaoDeleteArgs>(args: SelectSubset<T, SubmissaoDeleteArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submissao.
     * @param {SubmissaoUpdateArgs} args - Arguments to update one Submissao.
     * @example
     * // Update one Submissao
     * const submissao = await prisma.submissao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissaoUpdateArgs>(args: SelectSubset<T, SubmissaoUpdateArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissaos.
     * @param {SubmissaoDeleteManyArgs} args - Arguments to filter Submissaos to delete.
     * @example
     * // Delete a few Submissaos
     * const { count } = await prisma.submissao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissaoDeleteManyArgs>(args?: SelectSubset<T, SubmissaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissaos
     * const submissao = await prisma.submissao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissaoUpdateManyArgs>(args: SelectSubset<T, SubmissaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissaos and returns the data updated in the database.
     * @param {SubmissaoUpdateManyAndReturnArgs} args - Arguments to update many Submissaos.
     * @example
     * // Update many Submissaos
     * const submissao = await prisma.submissao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissaos and only return the `id`
     * const submissaoWithIdOnly = await prisma.submissao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissaoUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submissao.
     * @param {SubmissaoUpsertArgs} args - Arguments to update or create a Submissao.
     * @example
     * // Update or create a Submissao
     * const submissao = await prisma.submissao.upsert({
     *   create: {
     *     // ... data to create a Submissao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submissao we want to update
     *   }
     * })
     */
    upsert<T extends SubmissaoUpsertArgs>(args: SelectSubset<T, SubmissaoUpsertArgs<ExtArgs>>): Prisma__SubmissaoClient<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoCountArgs} args - Arguments to filter Submissaos to count.
     * @example
     * // Count the number of Submissaos
     * const count = await prisma.submissao.count({
     *   where: {
     *     // ... the filter for the Submissaos we want to count
     *   }
     * })
    **/
    count<T extends SubmissaoCountArgs>(
      args?: Subset<T, SubmissaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submissao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissaoAggregateArgs>(args: Subset<T, SubmissaoAggregateArgs>): Prisma.PrismaPromise<GetSubmissaoAggregateType<T>>

    /**
     * Group by Submissao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissaoGroupByArgs['orderBy'] }
        : { orderBy?: SubmissaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submissao model
   */
  readonly fields: SubmissaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submissao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    desafioOrigem<T extends DesafioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DesafioDefaultArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submissao model
   */
  interface SubmissaoFieldRefs {
    readonly id: FieldRef<"Submissao", 'Int'>
    readonly nome: FieldRef<"Submissao", 'String'>
    readonly email: FieldRef<"Submissao", 'String'>
    readonly telefone: FieldRef<"Submissao", 'String'>
    readonly descricao: FieldRef<"Submissao", 'String'>
    readonly nomeProjeto: FieldRef<"Submissao", 'String'>
    readonly documento: FieldRef<"Submissao", 'String'>
    readonly status: FieldRef<"Submissao", 'String'>
    readonly createdAt: FieldRef<"Submissao", 'DateTime'>
    readonly desafioId: FieldRef<"Submissao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Submissao findUnique
   */
  export type SubmissaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * Filter, which Submissao to fetch.
     */
    where: SubmissaoWhereUniqueInput
  }

  /**
   * Submissao findUniqueOrThrow
   */
  export type SubmissaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * Filter, which Submissao to fetch.
     */
    where: SubmissaoWhereUniqueInput
  }

  /**
   * Submissao findFirst
   */
  export type SubmissaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * Filter, which Submissao to fetch.
     */
    where?: SubmissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissaos to fetch.
     */
    orderBy?: SubmissaoOrderByWithRelationInput | SubmissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissaos.
     */
    cursor?: SubmissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissaos.
     */
    distinct?: SubmissaoScalarFieldEnum | SubmissaoScalarFieldEnum[]
  }

  /**
   * Submissao findFirstOrThrow
   */
  export type SubmissaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * Filter, which Submissao to fetch.
     */
    where?: SubmissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissaos to fetch.
     */
    orderBy?: SubmissaoOrderByWithRelationInput | SubmissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissaos.
     */
    cursor?: SubmissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissaos.
     */
    distinct?: SubmissaoScalarFieldEnum | SubmissaoScalarFieldEnum[]
  }

  /**
   * Submissao findMany
   */
  export type SubmissaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * Filter, which Submissaos to fetch.
     */
    where?: SubmissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissaos to fetch.
     */
    orderBy?: SubmissaoOrderByWithRelationInput | SubmissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissaos.
     */
    cursor?: SubmissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissaos.
     */
    skip?: number
    distinct?: SubmissaoScalarFieldEnum | SubmissaoScalarFieldEnum[]
  }

  /**
   * Submissao create
   */
  export type SubmissaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Submissao.
     */
    data: XOR<SubmissaoCreateInput, SubmissaoUncheckedCreateInput>
  }

  /**
   * Submissao createMany
   */
  export type SubmissaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissaos.
     */
    data: SubmissaoCreateManyInput | SubmissaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submissao createManyAndReturn
   */
  export type SubmissaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * The data used to create many Submissaos.
     */
    data: SubmissaoCreateManyInput | SubmissaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submissao update
   */
  export type SubmissaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Submissao.
     */
    data: XOR<SubmissaoUpdateInput, SubmissaoUncheckedUpdateInput>
    /**
     * Choose, which Submissao to update.
     */
    where: SubmissaoWhereUniqueInput
  }

  /**
   * Submissao updateMany
   */
  export type SubmissaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissaos.
     */
    data: XOR<SubmissaoUpdateManyMutationInput, SubmissaoUncheckedUpdateManyInput>
    /**
     * Filter which Submissaos to update
     */
    where?: SubmissaoWhereInput
    /**
     * Limit how many Submissaos to update.
     */
    limit?: number
  }

  /**
   * Submissao updateManyAndReturn
   */
  export type SubmissaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * The data used to update Submissaos.
     */
    data: XOR<SubmissaoUpdateManyMutationInput, SubmissaoUncheckedUpdateManyInput>
    /**
     * Filter which Submissaos to update
     */
    where?: SubmissaoWhereInput
    /**
     * Limit how many Submissaos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submissao upsert
   */
  export type SubmissaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Submissao to update in case it exists.
     */
    where: SubmissaoWhereUniqueInput
    /**
     * In case the Submissao found by the `where` argument doesn't exist, create a new Submissao with this data.
     */
    create: XOR<SubmissaoCreateInput, SubmissaoUncheckedCreateInput>
    /**
     * In case the Submissao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissaoUpdateInput, SubmissaoUncheckedUpdateInput>
  }

  /**
   * Submissao delete
   */
  export type SubmissaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    /**
     * Filter which Submissao to delete.
     */
    where: SubmissaoWhereUniqueInput
  }

  /**
   * Submissao deleteMany
   */
  export type SubmissaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissaos to delete
     */
    where?: SubmissaoWhereInput
    /**
     * Limit how many Submissaos to delete.
     */
    limit?: number
  }

  /**
   * Submissao without action
   */
  export type SubmissaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
  }


  /**
   * Model Contatos
   */

  export type AggregateContatos = {
    _count: ContatosCountAggregateOutputType | null
    _avg: ContatosAvgAggregateOutputType | null
    _sum: ContatosSumAggregateOutputType | null
    _min: ContatosMinAggregateOutputType | null
    _max: ContatosMaxAggregateOutputType | null
  }

  export type ContatosAvgAggregateOutputType = {
    id: number | null
  }

  export type ContatosSumAggregateOutputType = {
    id: number | null
  }

  export type ContatosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    descricao: string | null
    status: string | null
    createdAt: Date | null
  }

  export type ContatosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    descricao: string | null
    status: string | null
    createdAt: Date | null
  }

  export type ContatosCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    descricao: number
    status: number
    createdAt: number
    _all: number
  }


  export type ContatosAvgAggregateInputType = {
    id?: true
  }

  export type ContatosSumAggregateInputType = {
    id?: true
  }

  export type ContatosMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    descricao?: true
    status?: true
    createdAt?: true
  }

  export type ContatosMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    descricao?: true
    status?: true
    createdAt?: true
  }

  export type ContatosCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    descricao?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type ContatosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contatos to aggregate.
     */
    where?: ContatosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatos to fetch.
     */
    orderBy?: ContatosOrderByWithRelationInput | ContatosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContatosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contatos
    **/
    _count?: true | ContatosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContatosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContatosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContatosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContatosMaxAggregateInputType
  }

  export type GetContatosAggregateType<T extends ContatosAggregateArgs> = {
        [P in keyof T & keyof AggregateContatos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContatos[P]>
      : GetScalarType<T[P], AggregateContatos[P]>
  }




  export type ContatosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContatosWhereInput
    orderBy?: ContatosOrderByWithAggregationInput | ContatosOrderByWithAggregationInput[]
    by: ContatosScalarFieldEnum[] | ContatosScalarFieldEnum
    having?: ContatosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContatosCountAggregateInputType | true
    _avg?: ContatosAvgAggregateInputType
    _sum?: ContatosSumAggregateInputType
    _min?: ContatosMinAggregateInputType
    _max?: ContatosMaxAggregateInputType
  }

  export type ContatosGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string
    descricao: string
    status: string | null
    createdAt: Date | null
    _count: ContatosCountAggregateOutputType | null
    _avg: ContatosAvgAggregateOutputType | null
    _sum: ContatosSumAggregateOutputType | null
    _min: ContatosMinAggregateOutputType | null
    _max: ContatosMaxAggregateOutputType | null
  }

  type GetContatosGroupByPayload<T extends ContatosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContatosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContatosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContatosGroupByOutputType[P]>
            : GetScalarType<T[P], ContatosGroupByOutputType[P]>
        }
      >
    >


  export type ContatosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["contatos"]>

  export type ContatosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["contatos"]>

  export type ContatosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["contatos"]>

  export type ContatosSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    descricao?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type ContatosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "telefone" | "descricao" | "status" | "createdAt", ExtArgs["result"]["contatos"]>

  export type $ContatosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contatos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string
      descricao: string
      status: string | null
      createdAt: Date | null
    }, ExtArgs["result"]["contatos"]>
    composites: {}
  }

  type ContatosGetPayload<S extends boolean | null | undefined | ContatosDefaultArgs> = $Result.GetResult<Prisma.$ContatosPayload, S>

  type ContatosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContatosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContatosCountAggregateInputType | true
    }

  export interface ContatosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contatos'], meta: { name: 'Contatos' } }
    /**
     * Find zero or one Contatos that matches the filter.
     * @param {ContatosFindUniqueArgs} args - Arguments to find a Contatos
     * @example
     * // Get one Contatos
     * const contatos = await prisma.contatos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContatosFindUniqueArgs>(args: SelectSubset<T, ContatosFindUniqueArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contatos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContatosFindUniqueOrThrowArgs} args - Arguments to find a Contatos
     * @example
     * // Get one Contatos
     * const contatos = await prisma.contatos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContatosFindUniqueOrThrowArgs>(args: SelectSubset<T, ContatosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contatos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosFindFirstArgs} args - Arguments to find a Contatos
     * @example
     * // Get one Contatos
     * const contatos = await prisma.contatos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContatosFindFirstArgs>(args?: SelectSubset<T, ContatosFindFirstArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contatos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosFindFirstOrThrowArgs} args - Arguments to find a Contatos
     * @example
     * // Get one Contatos
     * const contatos = await prisma.contatos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContatosFindFirstOrThrowArgs>(args?: SelectSubset<T, ContatosFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contatos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contatos
     * const contatos = await prisma.contatos.findMany()
     * 
     * // Get first 10 Contatos
     * const contatos = await prisma.contatos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contatosWithIdOnly = await prisma.contatos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContatosFindManyArgs>(args?: SelectSubset<T, ContatosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contatos.
     * @param {ContatosCreateArgs} args - Arguments to create a Contatos.
     * @example
     * // Create one Contatos
     * const Contatos = await prisma.contatos.create({
     *   data: {
     *     // ... data to create a Contatos
     *   }
     * })
     * 
     */
    create<T extends ContatosCreateArgs>(args: SelectSubset<T, ContatosCreateArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contatos.
     * @param {ContatosCreateManyArgs} args - Arguments to create many Contatos.
     * @example
     * // Create many Contatos
     * const contatos = await prisma.contatos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContatosCreateManyArgs>(args?: SelectSubset<T, ContatosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contatos and returns the data saved in the database.
     * @param {ContatosCreateManyAndReturnArgs} args - Arguments to create many Contatos.
     * @example
     * // Create many Contatos
     * const contatos = await prisma.contatos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contatos and only return the `id`
     * const contatosWithIdOnly = await prisma.contatos.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContatosCreateManyAndReturnArgs>(args?: SelectSubset<T, ContatosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contatos.
     * @param {ContatosDeleteArgs} args - Arguments to delete one Contatos.
     * @example
     * // Delete one Contatos
     * const Contatos = await prisma.contatos.delete({
     *   where: {
     *     // ... filter to delete one Contatos
     *   }
     * })
     * 
     */
    delete<T extends ContatosDeleteArgs>(args: SelectSubset<T, ContatosDeleteArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contatos.
     * @param {ContatosUpdateArgs} args - Arguments to update one Contatos.
     * @example
     * // Update one Contatos
     * const contatos = await prisma.contatos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContatosUpdateArgs>(args: SelectSubset<T, ContatosUpdateArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contatos.
     * @param {ContatosDeleteManyArgs} args - Arguments to filter Contatos to delete.
     * @example
     * // Delete a few Contatos
     * const { count } = await prisma.contatos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContatosDeleteManyArgs>(args?: SelectSubset<T, ContatosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contatos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contatos
     * const contatos = await prisma.contatos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContatosUpdateManyArgs>(args: SelectSubset<T, ContatosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contatos and returns the data updated in the database.
     * @param {ContatosUpdateManyAndReturnArgs} args - Arguments to update many Contatos.
     * @example
     * // Update many Contatos
     * const contatos = await prisma.contatos.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contatos and only return the `id`
     * const contatosWithIdOnly = await prisma.contatos.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContatosUpdateManyAndReturnArgs>(args: SelectSubset<T, ContatosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contatos.
     * @param {ContatosUpsertArgs} args - Arguments to update or create a Contatos.
     * @example
     * // Update or create a Contatos
     * const contatos = await prisma.contatos.upsert({
     *   create: {
     *     // ... data to create a Contatos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contatos we want to update
     *   }
     * })
     */
    upsert<T extends ContatosUpsertArgs>(args: SelectSubset<T, ContatosUpsertArgs<ExtArgs>>): Prisma__ContatosClient<$Result.GetResult<Prisma.$ContatosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contatos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosCountArgs} args - Arguments to filter Contatos to count.
     * @example
     * // Count the number of Contatos
     * const count = await prisma.contatos.count({
     *   where: {
     *     // ... the filter for the Contatos we want to count
     *   }
     * })
    **/
    count<T extends ContatosCountArgs>(
      args?: Subset<T, ContatosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContatosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contatos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContatosAggregateArgs>(args: Subset<T, ContatosAggregateArgs>): Prisma.PrismaPromise<GetContatosAggregateType<T>>

    /**
     * Group by Contatos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContatosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContatosGroupByArgs['orderBy'] }
        : { orderBy?: ContatosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContatosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContatosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contatos model
   */
  readonly fields: ContatosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contatos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContatosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contatos model
   */
  interface ContatosFieldRefs {
    readonly id: FieldRef<"Contatos", 'Int'>
    readonly nome: FieldRef<"Contatos", 'String'>
    readonly email: FieldRef<"Contatos", 'String'>
    readonly telefone: FieldRef<"Contatos", 'String'>
    readonly descricao: FieldRef<"Contatos", 'String'>
    readonly status: FieldRef<"Contatos", 'String'>
    readonly createdAt: FieldRef<"Contatos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contatos findUnique
   */
  export type ContatosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * Filter, which Contatos to fetch.
     */
    where: ContatosWhereUniqueInput
  }

  /**
   * Contatos findUniqueOrThrow
   */
  export type ContatosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * Filter, which Contatos to fetch.
     */
    where: ContatosWhereUniqueInput
  }

  /**
   * Contatos findFirst
   */
  export type ContatosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * Filter, which Contatos to fetch.
     */
    where?: ContatosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatos to fetch.
     */
    orderBy?: ContatosOrderByWithRelationInput | ContatosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contatos.
     */
    cursor?: ContatosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contatos.
     */
    distinct?: ContatosScalarFieldEnum | ContatosScalarFieldEnum[]
  }

  /**
   * Contatos findFirstOrThrow
   */
  export type ContatosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * Filter, which Contatos to fetch.
     */
    where?: ContatosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatos to fetch.
     */
    orderBy?: ContatosOrderByWithRelationInput | ContatosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contatos.
     */
    cursor?: ContatosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contatos.
     */
    distinct?: ContatosScalarFieldEnum | ContatosScalarFieldEnum[]
  }

  /**
   * Contatos findMany
   */
  export type ContatosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * Filter, which Contatos to fetch.
     */
    where?: ContatosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatos to fetch.
     */
    orderBy?: ContatosOrderByWithRelationInput | ContatosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contatos.
     */
    cursor?: ContatosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatos.
     */
    skip?: number
    distinct?: ContatosScalarFieldEnum | ContatosScalarFieldEnum[]
  }

  /**
   * Contatos create
   */
  export type ContatosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * The data needed to create a Contatos.
     */
    data: XOR<ContatosCreateInput, ContatosUncheckedCreateInput>
  }

  /**
   * Contatos createMany
   */
  export type ContatosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contatos.
     */
    data: ContatosCreateManyInput | ContatosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contatos createManyAndReturn
   */
  export type ContatosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * The data used to create many Contatos.
     */
    data: ContatosCreateManyInput | ContatosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contatos update
   */
  export type ContatosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * The data needed to update a Contatos.
     */
    data: XOR<ContatosUpdateInput, ContatosUncheckedUpdateInput>
    /**
     * Choose, which Contatos to update.
     */
    where: ContatosWhereUniqueInput
  }

  /**
   * Contatos updateMany
   */
  export type ContatosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contatos.
     */
    data: XOR<ContatosUpdateManyMutationInput, ContatosUncheckedUpdateManyInput>
    /**
     * Filter which Contatos to update
     */
    where?: ContatosWhereInput
    /**
     * Limit how many Contatos to update.
     */
    limit?: number
  }

  /**
   * Contatos updateManyAndReturn
   */
  export type ContatosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * The data used to update Contatos.
     */
    data: XOR<ContatosUpdateManyMutationInput, ContatosUncheckedUpdateManyInput>
    /**
     * Filter which Contatos to update
     */
    where?: ContatosWhereInput
    /**
     * Limit how many Contatos to update.
     */
    limit?: number
  }

  /**
   * Contatos upsert
   */
  export type ContatosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * The filter to search for the Contatos to update in case it exists.
     */
    where: ContatosWhereUniqueInput
    /**
     * In case the Contatos found by the `where` argument doesn't exist, create a new Contatos with this data.
     */
    create: XOR<ContatosCreateInput, ContatosUncheckedCreateInput>
    /**
     * In case the Contatos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContatosUpdateInput, ContatosUncheckedUpdateInput>
  }

  /**
   * Contatos delete
   */
  export type ContatosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
    /**
     * Filter which Contatos to delete.
     */
    where: ContatosWhereUniqueInput
  }

  /**
   * Contatos deleteMany
   */
  export type ContatosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contatos to delete
     */
    where?: ContatosWhereInput
    /**
     * Limit how many Contatos to delete.
     */
    limit?: number
  }

  /**
   * Contatos without action
   */
  export type ContatosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contatos
     */
    select?: ContatosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contatos
     */
    omit?: ContatosOmit<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    email: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    email?: boolean
    senha?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "senha", ExtArgs["result"]["usuario"]>

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      senha: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
  }


  /**
   * Model Desafio
   */

  export type AggregateDesafio = {
    _count: DesafioCountAggregateOutputType | null
    _avg: DesafioAvgAggregateOutputType | null
    _sum: DesafioSumAggregateOutputType | null
    _min: DesafioMinAggregateOutputType | null
    _max: DesafioMaxAggregateOutputType | null
  }

  export type DesafioAvgAggregateOutputType = {
    id: number | null
  }

  export type DesafioSumAggregateOutputType = {
    id: number | null
  }

  export type DesafioMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    imagem: string | null
    descricao: string | null
    resumo: string | null
    status: boolean | null
  }

  export type DesafioMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    imagem: string | null
    descricao: string | null
    resumo: string | null
    status: boolean | null
  }

  export type DesafioCountAggregateOutputType = {
    id: number
    titulo: number
    imagem: number
    descricao: number
    resumo: number
    status: number
    _all: number
  }


  export type DesafioAvgAggregateInputType = {
    id?: true
  }

  export type DesafioSumAggregateInputType = {
    id?: true
  }

  export type DesafioMinAggregateInputType = {
    id?: true
    titulo?: true
    imagem?: true
    descricao?: true
    resumo?: true
    status?: true
  }

  export type DesafioMaxAggregateInputType = {
    id?: true
    titulo?: true
    imagem?: true
    descricao?: true
    resumo?: true
    status?: true
  }

  export type DesafioCountAggregateInputType = {
    id?: true
    titulo?: true
    imagem?: true
    descricao?: true
    resumo?: true
    status?: true
    _all?: true
  }

  export type DesafioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Desafio to aggregate.
     */
    where?: DesafioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Desafios to fetch.
     */
    orderBy?: DesafioOrderByWithRelationInput | DesafioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DesafioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Desafios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Desafios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Desafios
    **/
    _count?: true | DesafioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DesafioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DesafioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DesafioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DesafioMaxAggregateInputType
  }

  export type GetDesafioAggregateType<T extends DesafioAggregateArgs> = {
        [P in keyof T & keyof AggregateDesafio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDesafio[P]>
      : GetScalarType<T[P], AggregateDesafio[P]>
  }




  export type DesafioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DesafioWhereInput
    orderBy?: DesafioOrderByWithAggregationInput | DesafioOrderByWithAggregationInput[]
    by: DesafioScalarFieldEnum[] | DesafioScalarFieldEnum
    having?: DesafioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DesafioCountAggregateInputType | true
    _avg?: DesafioAvgAggregateInputType
    _sum?: DesafioSumAggregateInputType
    _min?: DesafioMinAggregateInputType
    _max?: DesafioMaxAggregateInputType
  }

  export type DesafioGroupByOutputType = {
    id: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
    _count: DesafioCountAggregateOutputType | null
    _avg: DesafioAvgAggregateOutputType | null
    _sum: DesafioSumAggregateOutputType | null
    _min: DesafioMinAggregateOutputType | null
    _max: DesafioMaxAggregateOutputType | null
  }

  type GetDesafioGroupByPayload<T extends DesafioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DesafioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DesafioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DesafioGroupByOutputType[P]>
            : GetScalarType<T[P], DesafioGroupByOutputType[P]>
        }
      >
    >


  export type DesafioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
    submissao?: boolean | Desafio$submissaoArgs<ExtArgs>
    _count?: boolean | DesafioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["desafio"]>

  export type DesafioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }, ExtArgs["result"]["desafio"]>

  export type DesafioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }, ExtArgs["result"]["desafio"]>

  export type DesafioSelectScalar = {
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }

  export type DesafioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "imagem" | "descricao" | "resumo" | "status", ExtArgs["result"]["desafio"]>
  export type DesafioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissao?: boolean | Desafio$submissaoArgs<ExtArgs>
    _count?: boolean | DesafioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DesafioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DesafioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DesafioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Desafio"
    objects: {
      submissao: Prisma.$SubmissaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      imagem: string
      descricao: string
      resumo: string
      status: boolean
    }, ExtArgs["result"]["desafio"]>
    composites: {}
  }

  type DesafioGetPayload<S extends boolean | null | undefined | DesafioDefaultArgs> = $Result.GetResult<Prisma.$DesafioPayload, S>

  type DesafioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DesafioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DesafioCountAggregateInputType | true
    }

  export interface DesafioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Desafio'], meta: { name: 'Desafio' } }
    /**
     * Find zero or one Desafio that matches the filter.
     * @param {DesafioFindUniqueArgs} args - Arguments to find a Desafio
     * @example
     * // Get one Desafio
     * const desafio = await prisma.desafio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DesafioFindUniqueArgs>(args: SelectSubset<T, DesafioFindUniqueArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Desafio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DesafioFindUniqueOrThrowArgs} args - Arguments to find a Desafio
     * @example
     * // Get one Desafio
     * const desafio = await prisma.desafio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DesafioFindUniqueOrThrowArgs>(args: SelectSubset<T, DesafioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Desafio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioFindFirstArgs} args - Arguments to find a Desafio
     * @example
     * // Get one Desafio
     * const desafio = await prisma.desafio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DesafioFindFirstArgs>(args?: SelectSubset<T, DesafioFindFirstArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Desafio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioFindFirstOrThrowArgs} args - Arguments to find a Desafio
     * @example
     * // Get one Desafio
     * const desafio = await prisma.desafio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DesafioFindFirstOrThrowArgs>(args?: SelectSubset<T, DesafioFindFirstOrThrowArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Desafios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Desafios
     * const desafios = await prisma.desafio.findMany()
     * 
     * // Get first 10 Desafios
     * const desafios = await prisma.desafio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const desafioWithIdOnly = await prisma.desafio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DesafioFindManyArgs>(args?: SelectSubset<T, DesafioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Desafio.
     * @param {DesafioCreateArgs} args - Arguments to create a Desafio.
     * @example
     * // Create one Desafio
     * const Desafio = await prisma.desafio.create({
     *   data: {
     *     // ... data to create a Desafio
     *   }
     * })
     * 
     */
    create<T extends DesafioCreateArgs>(args: SelectSubset<T, DesafioCreateArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Desafios.
     * @param {DesafioCreateManyArgs} args - Arguments to create many Desafios.
     * @example
     * // Create many Desafios
     * const desafio = await prisma.desafio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DesafioCreateManyArgs>(args?: SelectSubset<T, DesafioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Desafios and returns the data saved in the database.
     * @param {DesafioCreateManyAndReturnArgs} args - Arguments to create many Desafios.
     * @example
     * // Create many Desafios
     * const desafio = await prisma.desafio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Desafios and only return the `id`
     * const desafioWithIdOnly = await prisma.desafio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DesafioCreateManyAndReturnArgs>(args?: SelectSubset<T, DesafioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Desafio.
     * @param {DesafioDeleteArgs} args - Arguments to delete one Desafio.
     * @example
     * // Delete one Desafio
     * const Desafio = await prisma.desafio.delete({
     *   where: {
     *     // ... filter to delete one Desafio
     *   }
     * })
     * 
     */
    delete<T extends DesafioDeleteArgs>(args: SelectSubset<T, DesafioDeleteArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Desafio.
     * @param {DesafioUpdateArgs} args - Arguments to update one Desafio.
     * @example
     * // Update one Desafio
     * const desafio = await prisma.desafio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DesafioUpdateArgs>(args: SelectSubset<T, DesafioUpdateArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Desafios.
     * @param {DesafioDeleteManyArgs} args - Arguments to filter Desafios to delete.
     * @example
     * // Delete a few Desafios
     * const { count } = await prisma.desafio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DesafioDeleteManyArgs>(args?: SelectSubset<T, DesafioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Desafios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Desafios
     * const desafio = await prisma.desafio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DesafioUpdateManyArgs>(args: SelectSubset<T, DesafioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Desafios and returns the data updated in the database.
     * @param {DesafioUpdateManyAndReturnArgs} args - Arguments to update many Desafios.
     * @example
     * // Update many Desafios
     * const desafio = await prisma.desafio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Desafios and only return the `id`
     * const desafioWithIdOnly = await prisma.desafio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DesafioUpdateManyAndReturnArgs>(args: SelectSubset<T, DesafioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Desafio.
     * @param {DesafioUpsertArgs} args - Arguments to update or create a Desafio.
     * @example
     * // Update or create a Desafio
     * const desafio = await prisma.desafio.upsert({
     *   create: {
     *     // ... data to create a Desafio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Desafio we want to update
     *   }
     * })
     */
    upsert<T extends DesafioUpsertArgs>(args: SelectSubset<T, DesafioUpsertArgs<ExtArgs>>): Prisma__DesafioClient<$Result.GetResult<Prisma.$DesafioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Desafios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioCountArgs} args - Arguments to filter Desafios to count.
     * @example
     * // Count the number of Desafios
     * const count = await prisma.desafio.count({
     *   where: {
     *     // ... the filter for the Desafios we want to count
     *   }
     * })
    **/
    count<T extends DesafioCountArgs>(
      args?: Subset<T, DesafioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DesafioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Desafio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DesafioAggregateArgs>(args: Subset<T, DesafioAggregateArgs>): Prisma.PrismaPromise<GetDesafioAggregateType<T>>

    /**
     * Group by Desafio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesafioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DesafioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DesafioGroupByArgs['orderBy'] }
        : { orderBy?: DesafioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DesafioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDesafioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Desafio model
   */
  readonly fields: DesafioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Desafio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DesafioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submissao<T extends Desafio$submissaoArgs<ExtArgs> = {}>(args?: Subset<T, Desafio$submissaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Desafio model
   */
  interface DesafioFieldRefs {
    readonly id: FieldRef<"Desafio", 'Int'>
    readonly titulo: FieldRef<"Desafio", 'String'>
    readonly imagem: FieldRef<"Desafio", 'String'>
    readonly descricao: FieldRef<"Desafio", 'String'>
    readonly resumo: FieldRef<"Desafio", 'String'>
    readonly status: FieldRef<"Desafio", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Desafio findUnique
   */
  export type DesafioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * Filter, which Desafio to fetch.
     */
    where: DesafioWhereUniqueInput
  }

  /**
   * Desafio findUniqueOrThrow
   */
  export type DesafioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * Filter, which Desafio to fetch.
     */
    where: DesafioWhereUniqueInput
  }

  /**
   * Desafio findFirst
   */
  export type DesafioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * Filter, which Desafio to fetch.
     */
    where?: DesafioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Desafios to fetch.
     */
    orderBy?: DesafioOrderByWithRelationInput | DesafioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Desafios.
     */
    cursor?: DesafioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Desafios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Desafios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Desafios.
     */
    distinct?: DesafioScalarFieldEnum | DesafioScalarFieldEnum[]
  }

  /**
   * Desafio findFirstOrThrow
   */
  export type DesafioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * Filter, which Desafio to fetch.
     */
    where?: DesafioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Desafios to fetch.
     */
    orderBy?: DesafioOrderByWithRelationInput | DesafioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Desafios.
     */
    cursor?: DesafioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Desafios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Desafios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Desafios.
     */
    distinct?: DesafioScalarFieldEnum | DesafioScalarFieldEnum[]
  }

  /**
   * Desafio findMany
   */
  export type DesafioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * Filter, which Desafios to fetch.
     */
    where?: DesafioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Desafios to fetch.
     */
    orderBy?: DesafioOrderByWithRelationInput | DesafioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Desafios.
     */
    cursor?: DesafioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Desafios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Desafios.
     */
    skip?: number
    distinct?: DesafioScalarFieldEnum | DesafioScalarFieldEnum[]
  }

  /**
   * Desafio create
   */
  export type DesafioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * The data needed to create a Desafio.
     */
    data: XOR<DesafioCreateInput, DesafioUncheckedCreateInput>
  }

  /**
   * Desafio createMany
   */
  export type DesafioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Desafios.
     */
    data: DesafioCreateManyInput | DesafioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Desafio createManyAndReturn
   */
  export type DesafioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * The data used to create many Desafios.
     */
    data: DesafioCreateManyInput | DesafioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Desafio update
   */
  export type DesafioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * The data needed to update a Desafio.
     */
    data: XOR<DesafioUpdateInput, DesafioUncheckedUpdateInput>
    /**
     * Choose, which Desafio to update.
     */
    where: DesafioWhereUniqueInput
  }

  /**
   * Desafio updateMany
   */
  export type DesafioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Desafios.
     */
    data: XOR<DesafioUpdateManyMutationInput, DesafioUncheckedUpdateManyInput>
    /**
     * Filter which Desafios to update
     */
    where?: DesafioWhereInput
    /**
     * Limit how many Desafios to update.
     */
    limit?: number
  }

  /**
   * Desafio updateManyAndReturn
   */
  export type DesafioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * The data used to update Desafios.
     */
    data: XOR<DesafioUpdateManyMutationInput, DesafioUncheckedUpdateManyInput>
    /**
     * Filter which Desafios to update
     */
    where?: DesafioWhereInput
    /**
     * Limit how many Desafios to update.
     */
    limit?: number
  }

  /**
   * Desafio upsert
   */
  export type DesafioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * The filter to search for the Desafio to update in case it exists.
     */
    where: DesafioWhereUniqueInput
    /**
     * In case the Desafio found by the `where` argument doesn't exist, create a new Desafio with this data.
     */
    create: XOR<DesafioCreateInput, DesafioUncheckedCreateInput>
    /**
     * In case the Desafio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DesafioUpdateInput, DesafioUncheckedUpdateInput>
  }

  /**
   * Desafio delete
   */
  export type DesafioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
    /**
     * Filter which Desafio to delete.
     */
    where: DesafioWhereUniqueInput
  }

  /**
   * Desafio deleteMany
   */
  export type DesafioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Desafios to delete
     */
    where?: DesafioWhereInput
    /**
     * Limit how many Desafios to delete.
     */
    limit?: number
  }

  /**
   * Desafio.submissao
   */
  export type Desafio$submissaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submissao
     */
    select?: SubmissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submissao
     */
    omit?: SubmissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissaoInclude<ExtArgs> | null
    where?: SubmissaoWhereInput
    orderBy?: SubmissaoOrderByWithRelationInput | SubmissaoOrderByWithRelationInput[]
    cursor?: SubmissaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissaoScalarFieldEnum | SubmissaoScalarFieldEnum[]
  }

  /**
   * Desafio without action
   */
  export type DesafioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Desafio
     */
    select?: DesafioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Desafio
     */
    omit?: DesafioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesafioInclude<ExtArgs> | null
  }


  /**
   * Model Cases
   */

  export type AggregateCases = {
    _count: CasesCountAggregateOutputType | null
    _avg: CasesAvgAggregateOutputType | null
    _sum: CasesSumAggregateOutputType | null
    _min: CasesMinAggregateOutputType | null
    _max: CasesMaxAggregateOutputType | null
  }

  export type CasesAvgAggregateOutputType = {
    id: number | null
  }

  export type CasesSumAggregateOutputType = {
    id: number | null
  }

  export type CasesMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    imagem: string | null
    descricao: string | null
    resumo: string | null
    status: boolean | null
  }

  export type CasesMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    imagem: string | null
    descricao: string | null
    resumo: string | null
    status: boolean | null
  }

  export type CasesCountAggregateOutputType = {
    id: number
    titulo: number
    imagem: number
    descricao: number
    resumo: number
    status: number
    _all: number
  }


  export type CasesAvgAggregateInputType = {
    id?: true
  }

  export type CasesSumAggregateInputType = {
    id?: true
  }

  export type CasesMinAggregateInputType = {
    id?: true
    titulo?: true
    imagem?: true
    descricao?: true
    resumo?: true
    status?: true
  }

  export type CasesMaxAggregateInputType = {
    id?: true
    titulo?: true
    imagem?: true
    descricao?: true
    resumo?: true
    status?: true
  }

  export type CasesCountAggregateInputType = {
    id?: true
    titulo?: true
    imagem?: true
    descricao?: true
    resumo?: true
    status?: true
    _all?: true
  }

  export type CasesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to aggregate.
     */
    where?: CasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CasesOrderByWithRelationInput | CasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CasesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CasesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CasesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CasesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CasesMaxAggregateInputType
  }

  export type GetCasesAggregateType<T extends CasesAggregateArgs> = {
        [P in keyof T & keyof AggregateCases]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCases[P]>
      : GetScalarType<T[P], AggregateCases[P]>
  }




  export type CasesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CasesWhereInput
    orderBy?: CasesOrderByWithAggregationInput | CasesOrderByWithAggregationInput[]
    by: CasesScalarFieldEnum[] | CasesScalarFieldEnum
    having?: CasesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CasesCountAggregateInputType | true
    _avg?: CasesAvgAggregateInputType
    _sum?: CasesSumAggregateInputType
    _min?: CasesMinAggregateInputType
    _max?: CasesMaxAggregateInputType
  }

  export type CasesGroupByOutputType = {
    id: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
    _count: CasesCountAggregateOutputType | null
    _avg: CasesAvgAggregateOutputType | null
    _sum: CasesSumAggregateOutputType | null
    _min: CasesMinAggregateOutputType | null
    _max: CasesMaxAggregateOutputType | null
  }

  type GetCasesGroupByPayload<T extends CasesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CasesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CasesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CasesGroupByOutputType[P]>
            : GetScalarType<T[P], CasesGroupByOutputType[P]>
        }
      >
    >


  export type CasesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }, ExtArgs["result"]["cases"]>

  export type CasesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }, ExtArgs["result"]["cases"]>

  export type CasesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }, ExtArgs["result"]["cases"]>

  export type CasesSelectScalar = {
    id?: boolean
    titulo?: boolean
    imagem?: boolean
    descricao?: boolean
    resumo?: boolean
    status?: boolean
  }

  export type CasesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "imagem" | "descricao" | "resumo" | "status", ExtArgs["result"]["cases"]>

  export type $CasesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cases"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      imagem: string
      descricao: string
      resumo: string
      status: boolean
    }, ExtArgs["result"]["cases"]>
    composites: {}
  }

  type CasesGetPayload<S extends boolean | null | undefined | CasesDefaultArgs> = $Result.GetResult<Prisma.$CasesPayload, S>

  type CasesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CasesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CasesCountAggregateInputType | true
    }

  export interface CasesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cases'], meta: { name: 'Cases' } }
    /**
     * Find zero or one Cases that matches the filter.
     * @param {CasesFindUniqueArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CasesFindUniqueArgs>(args: SelectSubset<T, CasesFindUniqueArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cases that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CasesFindUniqueOrThrowArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CasesFindUniqueOrThrowArgs>(args: SelectSubset<T, CasesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesFindFirstArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CasesFindFirstArgs>(args?: SelectSubset<T, CasesFindFirstArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cases that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesFindFirstOrThrowArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CasesFindFirstOrThrowArgs>(args?: SelectSubset<T, CasesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.cases.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.cases.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const casesWithIdOnly = await prisma.cases.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CasesFindManyArgs>(args?: SelectSubset<T, CasesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cases.
     * @param {CasesCreateArgs} args - Arguments to create a Cases.
     * @example
     * // Create one Cases
     * const Cases = await prisma.cases.create({
     *   data: {
     *     // ... data to create a Cases
     *   }
     * })
     * 
     */
    create<T extends CasesCreateArgs>(args: SelectSubset<T, CasesCreateArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cases.
     * @param {CasesCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const cases = await prisma.cases.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CasesCreateManyArgs>(args?: SelectSubset<T, CasesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CasesCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const cases = await prisma.cases.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `id`
     * const casesWithIdOnly = await prisma.cases.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CasesCreateManyAndReturnArgs>(args?: SelectSubset<T, CasesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cases.
     * @param {CasesDeleteArgs} args - Arguments to delete one Cases.
     * @example
     * // Delete one Cases
     * const Cases = await prisma.cases.delete({
     *   where: {
     *     // ... filter to delete one Cases
     *   }
     * })
     * 
     */
    delete<T extends CasesDeleteArgs>(args: SelectSubset<T, CasesDeleteArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cases.
     * @param {CasesUpdateArgs} args - Arguments to update one Cases.
     * @example
     * // Update one Cases
     * const cases = await prisma.cases.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CasesUpdateArgs>(args: SelectSubset<T, CasesUpdateArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cases.
     * @param {CasesDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.cases.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CasesDeleteManyArgs>(args?: SelectSubset<T, CasesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const cases = await prisma.cases.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CasesUpdateManyArgs>(args: SelectSubset<T, CasesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases and returns the data updated in the database.
     * @param {CasesUpdateManyAndReturnArgs} args - Arguments to update many Cases.
     * @example
     * // Update many Cases
     * const cases = await prisma.cases.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cases and only return the `id`
     * const casesWithIdOnly = await prisma.cases.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CasesUpdateManyAndReturnArgs>(args: SelectSubset<T, CasesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cases.
     * @param {CasesUpsertArgs} args - Arguments to update or create a Cases.
     * @example
     * // Update or create a Cases
     * const cases = await prisma.cases.upsert({
     *   create: {
     *     // ... data to create a Cases
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cases we want to update
     *   }
     * })
     */
    upsert<T extends CasesUpsertArgs>(args: SelectSubset<T, CasesUpsertArgs<ExtArgs>>): Prisma__CasesClient<$Result.GetResult<Prisma.$CasesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.cases.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CasesCountArgs>(
      args?: Subset<T, CasesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CasesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CasesAggregateArgs>(args: Subset<T, CasesAggregateArgs>): Prisma.PrismaPromise<GetCasesAggregateType<T>>

    /**
     * Group by Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CasesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CasesGroupByArgs['orderBy'] }
        : { orderBy?: CasesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CasesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cases model
   */
  readonly fields: CasesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cases.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CasesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cases model
   */
  interface CasesFieldRefs {
    readonly id: FieldRef<"Cases", 'Int'>
    readonly titulo: FieldRef<"Cases", 'String'>
    readonly imagem: FieldRef<"Cases", 'String'>
    readonly descricao: FieldRef<"Cases", 'String'>
    readonly resumo: FieldRef<"Cases", 'String'>
    readonly status: FieldRef<"Cases", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Cases findUnique
   */
  export type CasesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where: CasesWhereUniqueInput
  }

  /**
   * Cases findUniqueOrThrow
   */
  export type CasesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where: CasesWhereUniqueInput
  }

  /**
   * Cases findFirst
   */
  export type CasesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CasesOrderByWithRelationInput | CasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * Cases findFirstOrThrow
   */
  export type CasesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CasesOrderByWithRelationInput | CasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * Cases findMany
   */
  export type CasesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CasesOrderByWithRelationInput | CasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * Cases create
   */
  export type CasesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * The data needed to create a Cases.
     */
    data: XOR<CasesCreateInput, CasesUncheckedCreateInput>
  }

  /**
   * Cases createMany
   */
  export type CasesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CasesCreateManyInput | CasesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cases createManyAndReturn
   */
  export type CasesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CasesCreateManyInput | CasesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cases update
   */
  export type CasesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * The data needed to update a Cases.
     */
    data: XOR<CasesUpdateInput, CasesUncheckedUpdateInput>
    /**
     * Choose, which Cases to update.
     */
    where: CasesWhereUniqueInput
  }

  /**
   * Cases updateMany
   */
  export type CasesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CasesUpdateManyMutationInput, CasesUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CasesWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
  }

  /**
   * Cases updateManyAndReturn
   */
  export type CasesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * The data used to update Cases.
     */
    data: XOR<CasesUpdateManyMutationInput, CasesUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CasesWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
  }

  /**
   * Cases upsert
   */
  export type CasesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * The filter to search for the Cases to update in case it exists.
     */
    where: CasesWhereUniqueInput
    /**
     * In case the Cases found by the `where` argument doesn't exist, create a new Cases with this data.
     */
    create: XOR<CasesCreateInput, CasesUncheckedCreateInput>
    /**
     * In case the Cases was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CasesUpdateInput, CasesUncheckedUpdateInput>
  }

  /**
   * Cases delete
   */
  export type CasesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
    /**
     * Filter which Cases to delete.
     */
    where: CasesWhereUniqueInput
  }

  /**
   * Cases deleteMany
   */
  export type CasesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CasesWhereInput
    /**
     * Limit how many Cases to delete.
     */
    limit?: number
  }

  /**
   * Cases without action
   */
  export type CasesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cases
     */
    select?: CasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cases
     */
    omit?: CasesOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SubmissaoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    descricao: 'descricao',
    nomeProjeto: 'nomeProjeto',
    documento: 'documento',
    status: 'status',
    createdAt: 'createdAt',
    desafioId: 'desafioId'
  };

  export type SubmissaoScalarFieldEnum = (typeof SubmissaoScalarFieldEnum)[keyof typeof SubmissaoScalarFieldEnum]


  export const ContatosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    descricao: 'descricao',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type ContatosScalarFieldEnum = (typeof ContatosScalarFieldEnum)[keyof typeof ContatosScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const DesafioScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    imagem: 'imagem',
    descricao: 'descricao',
    resumo: 'resumo',
    status: 'status'
  };

  export type DesafioScalarFieldEnum = (typeof DesafioScalarFieldEnum)[keyof typeof DesafioScalarFieldEnum]


  export const CasesScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    imagem: 'imagem',
    descricao: 'descricao',
    resumo: 'resumo',
    status: 'status'
  };

  export type CasesScalarFieldEnum = (typeof CasesScalarFieldEnum)[keyof typeof CasesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type SubmissaoWhereInput = {
    AND?: SubmissaoWhereInput | SubmissaoWhereInput[]
    OR?: SubmissaoWhereInput[]
    NOT?: SubmissaoWhereInput | SubmissaoWhereInput[]
    id?: IntFilter<"Submissao"> | number
    nome?: StringFilter<"Submissao"> | string
    email?: StringFilter<"Submissao"> | string
    telefone?: StringFilter<"Submissao"> | string
    descricao?: StringFilter<"Submissao"> | string
    nomeProjeto?: StringFilter<"Submissao"> | string
    documento?: StringNullableFilter<"Submissao"> | string | null
    status?: StringNullableFilter<"Submissao"> | string | null
    createdAt?: DateTimeNullableFilter<"Submissao"> | Date | string | null
    desafioId?: IntFilter<"Submissao"> | number
    desafioOrigem?: XOR<DesafioScalarRelationFilter, DesafioWhereInput>
  }

  export type SubmissaoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    nomeProjeto?: SortOrder
    documento?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    desafioId?: SortOrder
    desafioOrigem?: DesafioOrderByWithRelationInput
  }

  export type SubmissaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubmissaoWhereInput | SubmissaoWhereInput[]
    OR?: SubmissaoWhereInput[]
    NOT?: SubmissaoWhereInput | SubmissaoWhereInput[]
    nome?: StringFilter<"Submissao"> | string
    email?: StringFilter<"Submissao"> | string
    telefone?: StringFilter<"Submissao"> | string
    descricao?: StringFilter<"Submissao"> | string
    nomeProjeto?: StringFilter<"Submissao"> | string
    documento?: StringNullableFilter<"Submissao"> | string | null
    status?: StringNullableFilter<"Submissao"> | string | null
    createdAt?: DateTimeNullableFilter<"Submissao"> | Date | string | null
    desafioId?: IntFilter<"Submissao"> | number
    desafioOrigem?: XOR<DesafioScalarRelationFilter, DesafioWhereInput>
  }, "id">

  export type SubmissaoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    nomeProjeto?: SortOrder
    documento?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    desafioId?: SortOrder
    _count?: SubmissaoCountOrderByAggregateInput
    _avg?: SubmissaoAvgOrderByAggregateInput
    _max?: SubmissaoMaxOrderByAggregateInput
    _min?: SubmissaoMinOrderByAggregateInput
    _sum?: SubmissaoSumOrderByAggregateInput
  }

  export type SubmissaoScalarWhereWithAggregatesInput = {
    AND?: SubmissaoScalarWhereWithAggregatesInput | SubmissaoScalarWhereWithAggregatesInput[]
    OR?: SubmissaoScalarWhereWithAggregatesInput[]
    NOT?: SubmissaoScalarWhereWithAggregatesInput | SubmissaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Submissao"> | number
    nome?: StringWithAggregatesFilter<"Submissao"> | string
    email?: StringWithAggregatesFilter<"Submissao"> | string
    telefone?: StringWithAggregatesFilter<"Submissao"> | string
    descricao?: StringWithAggregatesFilter<"Submissao"> | string
    nomeProjeto?: StringWithAggregatesFilter<"Submissao"> | string
    documento?: StringNullableWithAggregatesFilter<"Submissao"> | string | null
    status?: StringNullableWithAggregatesFilter<"Submissao"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Submissao"> | Date | string | null
    desafioId?: IntWithAggregatesFilter<"Submissao"> | number
  }

  export type ContatosWhereInput = {
    AND?: ContatosWhereInput | ContatosWhereInput[]
    OR?: ContatosWhereInput[]
    NOT?: ContatosWhereInput | ContatosWhereInput[]
    id?: IntFilter<"Contatos"> | number
    nome?: StringFilter<"Contatos"> | string
    email?: StringFilter<"Contatos"> | string
    telefone?: StringFilter<"Contatos"> | string
    descricao?: StringFilter<"Contatos"> | string
    status?: StringNullableFilter<"Contatos"> | string | null
    createdAt?: DateTimeNullableFilter<"Contatos"> | Date | string | null
  }

  export type ContatosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
  }

  export type ContatosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContatosWhereInput | ContatosWhereInput[]
    OR?: ContatosWhereInput[]
    NOT?: ContatosWhereInput | ContatosWhereInput[]
    nome?: StringFilter<"Contatos"> | string
    email?: StringFilter<"Contatos"> | string
    telefone?: StringFilter<"Contatos"> | string
    descricao?: StringFilter<"Contatos"> | string
    status?: StringNullableFilter<"Contatos"> | string | null
    createdAt?: DateTimeNullableFilter<"Contatos"> | Date | string | null
  }, "id">

  export type ContatosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: ContatosCountOrderByAggregateInput
    _avg?: ContatosAvgOrderByAggregateInput
    _max?: ContatosMaxOrderByAggregateInput
    _min?: ContatosMinOrderByAggregateInput
    _sum?: ContatosSumOrderByAggregateInput
  }

  export type ContatosScalarWhereWithAggregatesInput = {
    AND?: ContatosScalarWhereWithAggregatesInput | ContatosScalarWhereWithAggregatesInput[]
    OR?: ContatosScalarWhereWithAggregatesInput[]
    NOT?: ContatosScalarWhereWithAggregatesInput | ContatosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contatos"> | number
    nome?: StringWithAggregatesFilter<"Contatos"> | string
    email?: StringWithAggregatesFilter<"Contatos"> | string
    telefone?: StringWithAggregatesFilter<"Contatos"> | string
    descricao?: StringWithAggregatesFilter<"Contatos"> | string
    status?: StringNullableWithAggregatesFilter<"Contatos"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Contatos"> | Date | string | null
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    senha?: StringFilter<"Usuario"> | string
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type DesafioWhereInput = {
    AND?: DesafioWhereInput | DesafioWhereInput[]
    OR?: DesafioWhereInput[]
    NOT?: DesafioWhereInput | DesafioWhereInput[]
    id?: IntFilter<"Desafio"> | number
    titulo?: StringFilter<"Desafio"> | string
    imagem?: StringFilter<"Desafio"> | string
    descricao?: StringFilter<"Desafio"> | string
    resumo?: StringFilter<"Desafio"> | string
    status?: BoolFilter<"Desafio"> | boolean
    submissao?: SubmissaoListRelationFilter
  }

  export type DesafioOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
    submissao?: SubmissaoOrderByRelationAggregateInput
  }

  export type DesafioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DesafioWhereInput | DesafioWhereInput[]
    OR?: DesafioWhereInput[]
    NOT?: DesafioWhereInput | DesafioWhereInput[]
    titulo?: StringFilter<"Desafio"> | string
    imagem?: StringFilter<"Desafio"> | string
    descricao?: StringFilter<"Desafio"> | string
    resumo?: StringFilter<"Desafio"> | string
    status?: BoolFilter<"Desafio"> | boolean
    submissao?: SubmissaoListRelationFilter
  }, "id">

  export type DesafioOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
    _count?: DesafioCountOrderByAggregateInput
    _avg?: DesafioAvgOrderByAggregateInput
    _max?: DesafioMaxOrderByAggregateInput
    _min?: DesafioMinOrderByAggregateInput
    _sum?: DesafioSumOrderByAggregateInput
  }

  export type DesafioScalarWhereWithAggregatesInput = {
    AND?: DesafioScalarWhereWithAggregatesInput | DesafioScalarWhereWithAggregatesInput[]
    OR?: DesafioScalarWhereWithAggregatesInput[]
    NOT?: DesafioScalarWhereWithAggregatesInput | DesafioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Desafio"> | number
    titulo?: StringWithAggregatesFilter<"Desafio"> | string
    imagem?: StringWithAggregatesFilter<"Desafio"> | string
    descricao?: StringWithAggregatesFilter<"Desafio"> | string
    resumo?: StringWithAggregatesFilter<"Desafio"> | string
    status?: BoolWithAggregatesFilter<"Desafio"> | boolean
  }

  export type CasesWhereInput = {
    AND?: CasesWhereInput | CasesWhereInput[]
    OR?: CasesWhereInput[]
    NOT?: CasesWhereInput | CasesWhereInput[]
    id?: IntFilter<"Cases"> | number
    titulo?: StringFilter<"Cases"> | string
    imagem?: StringFilter<"Cases"> | string
    descricao?: StringFilter<"Cases"> | string
    resumo?: StringFilter<"Cases"> | string
    status?: BoolFilter<"Cases"> | boolean
  }

  export type CasesOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type CasesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CasesWhereInput | CasesWhereInput[]
    OR?: CasesWhereInput[]
    NOT?: CasesWhereInput | CasesWhereInput[]
    titulo?: StringFilter<"Cases"> | string
    imagem?: StringFilter<"Cases"> | string
    descricao?: StringFilter<"Cases"> | string
    resumo?: StringFilter<"Cases"> | string
    status?: BoolFilter<"Cases"> | boolean
  }, "id">

  export type CasesOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
    _count?: CasesCountOrderByAggregateInput
    _avg?: CasesAvgOrderByAggregateInput
    _max?: CasesMaxOrderByAggregateInput
    _min?: CasesMinOrderByAggregateInput
    _sum?: CasesSumOrderByAggregateInput
  }

  export type CasesScalarWhereWithAggregatesInput = {
    AND?: CasesScalarWhereWithAggregatesInput | CasesScalarWhereWithAggregatesInput[]
    OR?: CasesScalarWhereWithAggregatesInput[]
    NOT?: CasesScalarWhereWithAggregatesInput | CasesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cases"> | number
    titulo?: StringWithAggregatesFilter<"Cases"> | string
    imagem?: StringWithAggregatesFilter<"Cases"> | string
    descricao?: StringWithAggregatesFilter<"Cases"> | string
    resumo?: StringWithAggregatesFilter<"Cases"> | string
    status?: BoolWithAggregatesFilter<"Cases"> | boolean
  }

  export type SubmissaoCreateInput = {
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento?: string | null
    status?: string | null
    createdAt?: Date | string | null
    desafioOrigem: DesafioCreateNestedOneWithoutSubmissaoInput
  }

  export type SubmissaoUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento?: string | null
    status?: string | null
    createdAt?: Date | string | null
    desafioId: number
  }

  export type SubmissaoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    desafioOrigem?: DesafioUpdateOneRequiredWithoutSubmissaoNestedInput
  }

  export type SubmissaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    desafioId?: IntFieldUpdateOperationsInput | number
  }

  export type SubmissaoCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento?: string | null
    status?: string | null
    createdAt?: Date | string | null
    desafioId: number
  }

  export type SubmissaoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubmissaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    desafioId?: IntFieldUpdateOperationsInput | number
  }

  export type ContatosCreateInput = {
    nome: string
    email: string
    telefone: string
    descricao: string
    status?: string | null
    createdAt?: Date | string | null
  }

  export type ContatosUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    descricao: string
    status?: string | null
    createdAt?: Date | string | null
  }

  export type ContatosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContatosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContatosCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    descricao: string
    status?: string | null
    createdAt?: Date | string | null
  }

  export type ContatosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContatosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioCreateInput = {
    email: string
    senha: string
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    email: string
    senha: string
  }

  export type UsuarioUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioCreateManyInput = {
    id?: number
    email: string
    senha: string
  }

  export type UsuarioUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type DesafioCreateInput = {
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
    submissao?: SubmissaoCreateNestedManyWithoutDesafioOrigemInput
  }

  export type DesafioUncheckedCreateInput = {
    id?: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
    submissao?: SubmissaoUncheckedCreateNestedManyWithoutDesafioOrigemInput
  }

  export type DesafioUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    submissao?: SubmissaoUpdateManyWithoutDesafioOrigemNestedInput
  }

  export type DesafioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    submissao?: SubmissaoUncheckedUpdateManyWithoutDesafioOrigemNestedInput
  }

  export type DesafioCreateManyInput = {
    id?: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
  }

  export type DesafioUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DesafioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CasesCreateInput = {
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
  }

  export type CasesUncheckedCreateInput = {
    id?: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
  }

  export type CasesUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CasesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CasesCreateManyInput = {
    id?: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
  }

  export type CasesUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CasesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DesafioScalarRelationFilter = {
    is?: DesafioWhereInput
    isNot?: DesafioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubmissaoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    nomeProjeto?: SortOrder
    documento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    desafioId?: SortOrder
  }

  export type SubmissaoAvgOrderByAggregateInput = {
    id?: SortOrder
    desafioId?: SortOrder
  }

  export type SubmissaoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    nomeProjeto?: SortOrder
    documento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    desafioId?: SortOrder
  }

  export type SubmissaoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    nomeProjeto?: SortOrder
    documento?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    desafioId?: SortOrder
  }

  export type SubmissaoSumOrderByAggregateInput = {
    id?: SortOrder
    desafioId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ContatosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ContatosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContatosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ContatosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ContatosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SubmissaoListRelationFilter = {
    every?: SubmissaoWhereInput
    some?: SubmissaoWhereInput
    none?: SubmissaoWhereInput
  }

  export type SubmissaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DesafioCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type DesafioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DesafioMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type DesafioMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type DesafioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CasesCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type CasesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CasesMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type CasesMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    descricao?: SortOrder
    resumo?: SortOrder
    status?: SortOrder
  }

  export type CasesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DesafioCreateNestedOneWithoutSubmissaoInput = {
    create?: XOR<DesafioCreateWithoutSubmissaoInput, DesafioUncheckedCreateWithoutSubmissaoInput>
    connectOrCreate?: DesafioCreateOrConnectWithoutSubmissaoInput
    connect?: DesafioWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DesafioUpdateOneRequiredWithoutSubmissaoNestedInput = {
    create?: XOR<DesafioCreateWithoutSubmissaoInput, DesafioUncheckedCreateWithoutSubmissaoInput>
    connectOrCreate?: DesafioCreateOrConnectWithoutSubmissaoInput
    upsert?: DesafioUpsertWithoutSubmissaoInput
    connect?: DesafioWhereUniqueInput
    update?: XOR<XOR<DesafioUpdateToOneWithWhereWithoutSubmissaoInput, DesafioUpdateWithoutSubmissaoInput>, DesafioUncheckedUpdateWithoutSubmissaoInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubmissaoCreateNestedManyWithoutDesafioOrigemInput = {
    create?: XOR<SubmissaoCreateWithoutDesafioOrigemInput, SubmissaoUncheckedCreateWithoutDesafioOrigemInput> | SubmissaoCreateWithoutDesafioOrigemInput[] | SubmissaoUncheckedCreateWithoutDesafioOrigemInput[]
    connectOrCreate?: SubmissaoCreateOrConnectWithoutDesafioOrigemInput | SubmissaoCreateOrConnectWithoutDesafioOrigemInput[]
    createMany?: SubmissaoCreateManyDesafioOrigemInputEnvelope
    connect?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
  }

  export type SubmissaoUncheckedCreateNestedManyWithoutDesafioOrigemInput = {
    create?: XOR<SubmissaoCreateWithoutDesafioOrigemInput, SubmissaoUncheckedCreateWithoutDesafioOrigemInput> | SubmissaoCreateWithoutDesafioOrigemInput[] | SubmissaoUncheckedCreateWithoutDesafioOrigemInput[]
    connectOrCreate?: SubmissaoCreateOrConnectWithoutDesafioOrigemInput | SubmissaoCreateOrConnectWithoutDesafioOrigemInput[]
    createMany?: SubmissaoCreateManyDesafioOrigemInputEnvelope
    connect?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SubmissaoUpdateManyWithoutDesafioOrigemNestedInput = {
    create?: XOR<SubmissaoCreateWithoutDesafioOrigemInput, SubmissaoUncheckedCreateWithoutDesafioOrigemInput> | SubmissaoCreateWithoutDesafioOrigemInput[] | SubmissaoUncheckedCreateWithoutDesafioOrigemInput[]
    connectOrCreate?: SubmissaoCreateOrConnectWithoutDesafioOrigemInput | SubmissaoCreateOrConnectWithoutDesafioOrigemInput[]
    upsert?: SubmissaoUpsertWithWhereUniqueWithoutDesafioOrigemInput | SubmissaoUpsertWithWhereUniqueWithoutDesafioOrigemInput[]
    createMany?: SubmissaoCreateManyDesafioOrigemInputEnvelope
    set?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    disconnect?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    delete?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    connect?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    update?: SubmissaoUpdateWithWhereUniqueWithoutDesafioOrigemInput | SubmissaoUpdateWithWhereUniqueWithoutDesafioOrigemInput[]
    updateMany?: SubmissaoUpdateManyWithWhereWithoutDesafioOrigemInput | SubmissaoUpdateManyWithWhereWithoutDesafioOrigemInput[]
    deleteMany?: SubmissaoScalarWhereInput | SubmissaoScalarWhereInput[]
  }

  export type SubmissaoUncheckedUpdateManyWithoutDesafioOrigemNestedInput = {
    create?: XOR<SubmissaoCreateWithoutDesafioOrigemInput, SubmissaoUncheckedCreateWithoutDesafioOrigemInput> | SubmissaoCreateWithoutDesafioOrigemInput[] | SubmissaoUncheckedCreateWithoutDesafioOrigemInput[]
    connectOrCreate?: SubmissaoCreateOrConnectWithoutDesafioOrigemInput | SubmissaoCreateOrConnectWithoutDesafioOrigemInput[]
    upsert?: SubmissaoUpsertWithWhereUniqueWithoutDesafioOrigemInput | SubmissaoUpsertWithWhereUniqueWithoutDesafioOrigemInput[]
    createMany?: SubmissaoCreateManyDesafioOrigemInputEnvelope
    set?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    disconnect?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    delete?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    connect?: SubmissaoWhereUniqueInput | SubmissaoWhereUniqueInput[]
    update?: SubmissaoUpdateWithWhereUniqueWithoutDesafioOrigemInput | SubmissaoUpdateWithWhereUniqueWithoutDesafioOrigemInput[]
    updateMany?: SubmissaoUpdateManyWithWhereWithoutDesafioOrigemInput | SubmissaoUpdateManyWithWhereWithoutDesafioOrigemInput[]
    deleteMany?: SubmissaoScalarWhereInput | SubmissaoScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DesafioCreateWithoutSubmissaoInput = {
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
  }

  export type DesafioUncheckedCreateWithoutSubmissaoInput = {
    id?: number
    titulo: string
    imagem: string
    descricao: string
    resumo: string
    status: boolean
  }

  export type DesafioCreateOrConnectWithoutSubmissaoInput = {
    where: DesafioWhereUniqueInput
    create: XOR<DesafioCreateWithoutSubmissaoInput, DesafioUncheckedCreateWithoutSubmissaoInput>
  }

  export type DesafioUpsertWithoutSubmissaoInput = {
    update: XOR<DesafioUpdateWithoutSubmissaoInput, DesafioUncheckedUpdateWithoutSubmissaoInput>
    create: XOR<DesafioCreateWithoutSubmissaoInput, DesafioUncheckedCreateWithoutSubmissaoInput>
    where?: DesafioWhereInput
  }

  export type DesafioUpdateToOneWithWhereWithoutSubmissaoInput = {
    where?: DesafioWhereInput
    data: XOR<DesafioUpdateWithoutSubmissaoInput, DesafioUncheckedUpdateWithoutSubmissaoInput>
  }

  export type DesafioUpdateWithoutSubmissaoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DesafioUncheckedUpdateWithoutSubmissaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    resumo?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubmissaoCreateWithoutDesafioOrigemInput = {
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento?: string | null
    status?: string | null
    createdAt?: Date | string | null
  }

  export type SubmissaoUncheckedCreateWithoutDesafioOrigemInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento?: string | null
    status?: string | null
    createdAt?: Date | string | null
  }

  export type SubmissaoCreateOrConnectWithoutDesafioOrigemInput = {
    where: SubmissaoWhereUniqueInput
    create: XOR<SubmissaoCreateWithoutDesafioOrigemInput, SubmissaoUncheckedCreateWithoutDesafioOrigemInput>
  }

  export type SubmissaoCreateManyDesafioOrigemInputEnvelope = {
    data: SubmissaoCreateManyDesafioOrigemInput | SubmissaoCreateManyDesafioOrigemInput[]
    skipDuplicates?: boolean
  }

  export type SubmissaoUpsertWithWhereUniqueWithoutDesafioOrigemInput = {
    where: SubmissaoWhereUniqueInput
    update: XOR<SubmissaoUpdateWithoutDesafioOrigemInput, SubmissaoUncheckedUpdateWithoutDesafioOrigemInput>
    create: XOR<SubmissaoCreateWithoutDesafioOrigemInput, SubmissaoUncheckedCreateWithoutDesafioOrigemInput>
  }

  export type SubmissaoUpdateWithWhereUniqueWithoutDesafioOrigemInput = {
    where: SubmissaoWhereUniqueInput
    data: XOR<SubmissaoUpdateWithoutDesafioOrigemInput, SubmissaoUncheckedUpdateWithoutDesafioOrigemInput>
  }

  export type SubmissaoUpdateManyWithWhereWithoutDesafioOrigemInput = {
    where: SubmissaoScalarWhereInput
    data: XOR<SubmissaoUpdateManyMutationInput, SubmissaoUncheckedUpdateManyWithoutDesafioOrigemInput>
  }

  export type SubmissaoScalarWhereInput = {
    AND?: SubmissaoScalarWhereInput | SubmissaoScalarWhereInput[]
    OR?: SubmissaoScalarWhereInput[]
    NOT?: SubmissaoScalarWhereInput | SubmissaoScalarWhereInput[]
    id?: IntFilter<"Submissao"> | number
    nome?: StringFilter<"Submissao"> | string
    email?: StringFilter<"Submissao"> | string
    telefone?: StringFilter<"Submissao"> | string
    descricao?: StringFilter<"Submissao"> | string
    nomeProjeto?: StringFilter<"Submissao"> | string
    documento?: StringNullableFilter<"Submissao"> | string | null
    status?: StringNullableFilter<"Submissao"> | string | null
    createdAt?: DateTimeNullableFilter<"Submissao"> | Date | string | null
    desafioId?: IntFilter<"Submissao"> | number
  }

  export type SubmissaoCreateManyDesafioOrigemInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    descricao: string
    nomeProjeto: string
    documento?: string | null
    status?: string | null
    createdAt?: Date | string | null
  }

  export type SubmissaoUpdateWithoutDesafioOrigemInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubmissaoUncheckedUpdateWithoutDesafioOrigemInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubmissaoUncheckedUpdateManyWithoutDesafioOrigemInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    nomeProjeto?: StringFieldUpdateOperationsInput | string
    documento?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}